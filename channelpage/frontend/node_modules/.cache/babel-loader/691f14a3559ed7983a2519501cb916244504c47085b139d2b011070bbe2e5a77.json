{"ast":null,"code":"import { useNavigate } from 'react-router-dom';\nconst handleSignIn = async event => {\n  event.preventDefault();\n  const email = event.target.email.value;\n  const password = event.target.password.value;\n  try {\n    const response = await fetch(\"http://localhost:5000/auth/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    const data = await response.json();\n    if (response.ok) {\n      // Salvăm token-ul JWT\n      localStorage.setItem(\"token\", data.token);\n      navigate(\"/channel\"); // Navigăm către pagina de canal\n    } else {\n      console.log('Login error response:', data); // Logăm răspunsul de eroare\n      alert(data.message); // Afișăm mesajul de eroare\n    }\n  } catch (error) {\n    console.error(\"Error during login:\", error);\n    alert(\"Eroare la autentificare.\");\n  }\n};\nconst handleRegister = async event => {\n  event.preventDefault();\n  const username = event.target.username.value;\n  const email = event.target.email.value;\n  const password = event.target.password.value;\n  try {\n    const response = await fetch(\"http://localhost:5000/auth/register\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username,\n        email,\n        password\n      })\n    });\n    const data = await response.json();\n    if (response.ok) {\n      alert(\"Cont creat cu succes! Autentificare automată.\");\n      localStorage.setItem(\"token\", data.token); // Salvăm token-ul JWT\n      navigate(\"/channel\"); // Navigăm către pagina de canal\n    } else {\n      console.log('Register error response:', data); // Logăm răspunsul de eroare\n      alert(data.message); // Afișăm mesajul de eroare\n    }\n  } catch (error) {\n    console.error(\"Error during registration:\", error);\n    alert(\"Eroare la înregistrare.\");\n  }\n};","map":{"version":3,"names":["useNavigate","handleSignIn","event","preventDefault","email","target","value","password","response","fetch","method","headers","body","JSON","stringify","data","json","ok","localStorage","setItem","token","navigate","console","log","alert","message","error","handleRegister","username"],"sources":["C:/Program Files/vscode/channelpage/frontend/src/login_page.js"],"sourcesContent":["import { useNavigate } from 'react-router-dom';\r\nconst handleSignIn = async (event) => {\r\n  event.preventDefault();\r\n  const email = event.target.email.value;\r\n  const password = event.target.password.value;\r\n\r\n  try {\r\n    const response = await fetch(\"http://localhost:5000/auth/login\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (response.ok) {\r\n      // Salvăm token-ul JWT\r\n      localStorage.setItem(\"token\", data.token);\r\n      navigate(\"/channel\"); // Navigăm către pagina de canal\r\n    } else {\r\n      console.log('Login error response:', data); // Logăm răspunsul de eroare\r\n      alert(data.message); // Afișăm mesajul de eroare\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error during login:\", error);\r\n    alert(\"Eroare la autentificare.\");\r\n  }\r\n};\r\n\r\nconst handleRegister = async (event) => {\r\n  event.preventDefault();\r\n  const username = event.target.username.value;\r\n  const email = event.target.email.value;\r\n  const password = event.target.password.value;\r\n\r\n  try {\r\n    const response = await fetch(\"http://localhost:5000/auth/register\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ username, email, password }),\r\n    });\r\n    const data = await response.json();\r\n\r\n    if (response.ok) {\r\n      alert(\"Cont creat cu succes! Autentificare automată.\");\r\n      localStorage.setItem(\"token\", data.token); // Salvăm token-ul JWT\r\n      navigate(\"/channel\"); // Navigăm către pagina de canal\r\n    } else {\r\n      console.log('Register error response:', data); // Logăm răspunsul de eroare\r\n      alert(data.message); // Afișăm mesajul de eroare\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error during registration:\", error);\r\n    alert(\"Eroare la înregistrare.\");\r\n  }\r\n};\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,MAAMC,YAAY,GAAG,MAAOC,KAAK,IAAK;EACpCA,KAAK,CAACC,cAAc,CAAC,CAAC;EACtB,MAAMC,KAAK,GAAGF,KAAK,CAACG,MAAM,CAACD,KAAK,CAACE,KAAK;EACtC,MAAMC,QAAQ,GAAGL,KAAK,CAACG,MAAM,CAACE,QAAQ,CAACD,KAAK;EAE5C,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;MAC/DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEV,KAAK;QAAEG;MAAS,CAAC;IAC1C,CAAC,CAAC;IAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAElC,IAAIR,QAAQ,CAACS,EAAE,EAAE;MACf;MACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,IAAI,CAACK,KAAK,CAAC;MACzCC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;IACxB,CAAC,MAAM;MACLC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAER,IAAI,CAAC,CAAC,CAAC;MAC5CS,KAAK,CAACT,IAAI,CAACU,OAAO,CAAC,CAAC,CAAC;IACvB;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdJ,OAAO,CAACI,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3CF,KAAK,CAAC,0BAA0B,CAAC;EACnC;AACF,CAAC;AAED,MAAMG,cAAc,GAAG,MAAOzB,KAAK,IAAK;EACtCA,KAAK,CAACC,cAAc,CAAC,CAAC;EACtB,MAAMyB,QAAQ,GAAG1B,KAAK,CAACG,MAAM,CAACuB,QAAQ,CAACtB,KAAK;EAC5C,MAAMF,KAAK,GAAGF,KAAK,CAACG,MAAM,CAACD,KAAK,CAACE,KAAK;EACtC,MAAMC,QAAQ,GAAGL,KAAK,CAACG,MAAM,CAACE,QAAQ,CAACD,KAAK;EAE5C,IAAI;IACF,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;MAClEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEc,QAAQ;QAAExB,KAAK;QAAEG;MAAS,CAAC;IACpD,CAAC,CAAC;IACF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAElC,IAAIR,QAAQ,CAACS,EAAE,EAAE;MACfO,KAAK,CAAC,+CAA+C,CAAC;MACtDN,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEJ,IAAI,CAACK,KAAK,CAAC,CAAC,CAAC;MAC3CC,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;IACxB,CAAC,MAAM;MACLC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAER,IAAI,CAAC,CAAC,CAAC;MAC/CS,KAAK,CAACT,IAAI,CAACU,OAAO,CAAC,CAAC,CAAC;IACvB;EACF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdJ,OAAO,CAACI,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClDF,KAAK,CAAC,yBAAyB,CAAC;EAClC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}